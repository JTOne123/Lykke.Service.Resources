// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.Resources.Client.AutorestClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ResourcesAPI.
    /// </summary>
    public static partial class ResourcesAPIExtensions
    {
            /// <summary>
            /// Gets all group resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<GroupResource> GetAllGroupResources(this IResourcesAPI operations)
            {
                return operations.GetAllGroupResourcesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all group resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GroupResource>> GetAllGroupResourcesAsync(this IResourcesAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllGroupResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds group resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// list of group resources
            /// </param>
            public static ErrorResponse AddGroupResources(this IResourcesAPI operations, GroupResourcesModel model = default(GroupResourcesModel))
            {
                return operations.AddGroupResourcesAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds group resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// list of group resources
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> AddGroupResourcesAsync(this IResourcesAPI operations, GroupResourcesModel model = default(GroupResourcesModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddGroupResourcesWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes group resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static ErrorResponse DeleteGroupResource(this IResourcesAPI operations, DeleteGroupResourceModel model = default(DeleteGroupResourceModel))
            {
                return operations.DeleteGroupResourceAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes group resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> DeleteGroupResourceAsync(this IResourcesAPI operations, DeleteGroupResourceModel model = default(DeleteGroupResourceModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteGroupResourceWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets group resource by name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// full name of the resource
            /// </param>
            public static object GetGroupResource(this IResourcesAPI operations, string name)
            {
                return operations.GetGroupResourceAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets group resource by name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// full name of the resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetGroupResourceAsync(this IResourcesAPI operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupResourceWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets section of group resources
            /// </summary>
            /// <remarks>
            /// Returns group resources in the specified section, for example: assetDetails
            /// will return all group resources under this section (assetDetails.iconLinks,
            /// assetDetails.headerLinks etc.)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// full name of the section
            /// </param>
            public static object GetGroupResourceSection(this IResourcesAPI operations, string name)
            {
                return operations.GetGroupResourceSectionAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets section of group resources
            /// </summary>
            /// <remarks>
            /// Returns group resources in the specified section, for example: assetDetails
            /// will return all group resources under this section (assetDetails.iconLinks,
            /// assetDetails.headerLinks etc.)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// full name of the section
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetGroupResourceSectionAsync(this IResourcesAPI operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupResourceSectionWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds group resource item
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// group resource item
            /// </param>
            public static ErrorResponse AddGroupResourceItem(this IResourcesAPI operations, GroupResourceModel model = default(GroupResourceModel))
            {
                return operations.AddGroupResourceItemAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds group resource item
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// group resource item
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> AddGroupResourceItemAsync(this IResourcesAPI operations, GroupResourceModel model = default(GroupResourceModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddGroupResourceItemWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes group resource item
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static ErrorResponse DeleteGroupResourceItem(this IResourcesAPI operations, DeleteGroupResourceItemModel model = default(DeleteGroupResourceItemModel))
            {
                return operations.DeleteGroupResourceItemAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes group resource item
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> DeleteGroupResourceItemAsync(this IResourcesAPI operations, DeleteGroupResourceItemModel model = default(DeleteGroupResourceItemModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteGroupResourceItemWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all image resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ImageResource> GetAllImageResources(this IResourcesAPI operations)
            {
                return operations.GetAllImageResourcesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all image resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ImageResource>> GetAllImageResourcesAsync(this IResourcesAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllImageResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds image resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static ErrorResponse AddImageResource(this IResourcesAPI operations, ImageResourceModel model = default(ImageResourceModel))
            {
                return operations.AddImageResourceAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds image resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> AddImageResourceAsync(this IResourcesAPI operations, ImageResourceModel model = default(ImageResourceModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddImageResourceWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets image resource by name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            public static string GetImageResource(this IResourcesAPI operations, string name)
            {
                return operations.GetImageResourceAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets image resource by name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetImageResourceAsync(this IResourcesAPI operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetImageResourceWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete image resource by name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            public static ErrorResponse DeleteImageResource(this IResourcesAPI operations, string name)
            {
                return operations.DeleteImageResourceAsync(name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete image resource by name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> DeleteImageResourceAsync(this IResourcesAPI operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteImageResourceWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object IsAlive(this IResourcesAPI operations)
            {
                return operations.IsAliveAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsAliveAsync(this IResourcesAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAliveWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all languages
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Language> GetAllLanguages(this IResourcesAPI operations)
            {
                return operations.GetAllLanguagesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all languages
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Language>> GetAllLanguagesAsync(this IResourcesAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllLanguagesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds language
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// language model
            /// </param>
            public static ErrorResponse AddLanguage(this IResourcesAPI operations, Language model = default(Language))
            {
                return operations.AddLanguageAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds language
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// language model
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> AddLanguageAsync(this IResourcesAPI operations, Language model = default(Language), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddLanguageWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes language by code
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='code'>
            /// </param>
            public static ErrorResponse DeleteLanguage(this IResourcesAPI operations, string code)
            {
                return operations.DeleteLanguageAsync(code).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes language by code
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> DeleteLanguageAsync(this IResourcesAPI operations, string code, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteLanguageWithHttpMessagesAsync(code, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all text resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<TextResource> GetAllTextResources(this IResourcesAPI operations)
            {
                return operations.GetAllTextResourcesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all text resources
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TextResource>> GetAllTextResourcesAsync(this IResourcesAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllTextResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds text resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// text resource model
            /// </param>
            public static ErrorResponse AddTextResource(this IResourcesAPI operations, TextResourceModel model = default(TextResourceModel))
            {
                return operations.AddTextResourceAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds text resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// text resource model
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> AddTextResourceAsync(this IResourcesAPI operations, TextResourceModel model = default(TextResourceModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddTextResourceWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes text reosource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static ErrorResponse DeleteTextResource(this IResourcesAPI operations, DeleteTextResourceModel model = default(DeleteTextResourceModel))
            {
                return operations.DeleteTextResourceAsync(model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes text reosource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> DeleteTextResourceAsync(this IResourcesAPI operations, DeleteTextResourceModel model = default(DeleteTextResourceModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteTextResourceWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets text resource by language and name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// languages
            /// </param>
            /// <param name='name'>
            /// full name of the resource
            /// </param>
            public static object GetTextResource(this IResourcesAPI operations, string lang, string name)
            {
                return operations.GetTextResourceAsync(lang, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets text resource by language and name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// languages
            /// </param>
            /// <param name='name'>
            /// full name of the resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTextResourceAsync(this IResourcesAPI operations, string lang, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTextResourceWithHttpMessagesAsync(lang, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets section of text resources
            /// </summary>
            /// <remarks>
            /// Returns text resources in the specified section, for example: lykke.ios
            /// will return all text resources under this section (lykke.ios.text,
            /// lykke.ios.title etc.)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// language
            /// </param>
            /// <param name='name'>
            /// full name of the section
            /// </param>
            public static object GetTextResourceSection(this IResourcesAPI operations, string lang, string name)
            {
                return operations.GetTextResourceSectionAsync(lang, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets section of text resources
            /// </summary>
            /// <remarks>
            /// Returns text resources in the specified section, for example: lykke.ios
            /// will return all text resources under this section (lykke.ios.text,
            /// lykke.ios.title etc.)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lang'>
            /// language
            /// </param>
            /// <param name='name'>
            /// full name of the section
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTextResourceSectionAsync(this IResourcesAPI operations, string lang, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTextResourceSectionWithHttpMessagesAsync(lang, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
